Index: sdl2-main/src/thread/morphos/SDL_systhread.c
===================================================================
RCS file: /home/cvs/root/morphos/morphoswb/libs/sdl2/sdl2-main/src/thread/morphos/SDL_systhread.c,v
retrieving revision 1.1
diff -u -r1.1 SDL_systhread.c
--- sdl2-main/src/thread/morphos/SDL_systhread.c	11 Sep 2014 15:48:16 -0000	1.1
+++ sdl2-main/src/thread/morphos/SDL_systhread.c	25 May 2015 18:49:10 -0000
@@ -51,8 +51,6 @@
 {
 	struct Task *t = SysBase->ThisTask;
 	t->tc_Node.ln_Name = (STRPTR)name;
-	t->tc_UserData = NULL;
-	D("[%s] tc_UserData is 0x%08lx.\n", __FUNCTION__, t->tc_UserData);
 }
 
 SDL_threadID
Index: sdl2-main/src/thread/morphos/SDL_systls.c
===================================================================
RCS file: /home/cvs/root/morphos/morphoswb/libs/sdl2/sdl2-main/src/thread/morphos/SDL_systls.c,v
retrieving revision 1.1
diff -u -r1.1 SDL_systls.c
--- sdl2-main/src/thread/morphos/SDL_systls.c	11 Sep 2014 15:48:16 -0000	1.1
+++ sdl2-main/src/thread/morphos/SDL_systls.c	25 May 2015 18:49:10 -0000
@@ -25,21 +25,69 @@
 
 #include <exec/execbase.h>
 #include <proto/exec.h>
+#define AROS_ALMOST_COMPATIBLE 1
+#include <exec/lists.h>
 
 #include "../SDL_thread_c.h"
 #undef D
 #define D(fmt, ...) ({((STRPTR (*)(void *, CONST_STRPTR , APTR (*)(APTR, UBYTE), STRPTR , ...))*(void**)((long)(*((APTR *)4)) - 922))((void*)(*((APTR *)4)), fmt, (APTR)1, NULL, ##__VA_ARGS__);})
 
+#define TLS_MAGICID "SDL2TLS"
+struct tlsmagic
+{
+	UBYTE	magicid[sizeof(TLS_MAGICID)];
+	APTR	tlsptr;
+};
+
 SDL_TLSData *
 SDL_SYS_GetTLSData()
 {
-	return (SDL_TLSData *)SysBase->ThisTask->tc_UserData;
+	struct MemList *ml;
+
+	ForeachNode(&SysBase->ThisTask->tc_MemEntry, ml)
+	{
+		if (ml->ml_NumEntries == 1 &&
+		    ml->ml_Node.ln_Name == (char *) ml->ml_ME[0].me_Addr &&
+		    !strcmp(ml->ml_Node.ln_Name, TLS_MAGICID))
+		{
+			struct tlsmagic *tm = ml->ml_ME[0].me_Addr;
+			return tm->tlsptr;
+		}
+	}
+
+	return NULL;
 }
 
+static const struct MemList stml = {{0,0,0,0,0}, 1, {{{MEMF_ANY}, sizeof(struct tlsmagic)}}};
+
 int
 SDL_SYS_SetTLSData(SDL_TLSData *data)
 {
-	SysBase->ThisTask->tc_UserData = data;
+	struct Task *t = SysBase->ThisTask;
+	struct MemList *ml;
+	struct tlsmagic *tm;
+
+	ForeachNode(&t->tc_MemEntry, ml)
+	{
+		if (ml->ml_NumEntries == 1 &&
+		    ml->ml_Node.ln_Name == (char *) ml->ml_ME[0].me_Addr &&
+		    !strcmp(ml->ml_Node.ln_Name, TLS_MAGICID))
+		{
+			tm = ml->ml_ME[0].me_Addr;
+			tm->tlsptr = data;
+			return 0;
+		}
+	}
+
+	ml = AllocEntry((struct MemList *) &stml);
+	if ((ULONG) ml & 0x80000000)
+		return 1;
+
+	tm = ml->ml_ME[0].me_Addr;
+	ml->ml_Node.ln_Name = tm->magicid;
+	memcpy(tm->magicid, TLS_MAGICID, sizeof(TLS_MAGICID));
+	tm->tlsptr = data;
+	ADDHEAD(&t->tc_MemEntry, &ml->ml_Node);
 	return 0;
 }
 
